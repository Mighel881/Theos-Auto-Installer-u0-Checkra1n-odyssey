bool sdksLoader(char Sdks[], char dlLink[]) {	 sdkS = [NSString stringWithUTF8String:Sdks];	dlLinK = [NSString stringWithUTF8String:dlLink];	Loc = [NSString stringWithFormat:@"/theos/sdks/iPhoneOS%s.sdk", [sdkS UTF8String]];	if (![fileManager fileExistsAtPath: Loc]) {		[CM RunCMD:[NSString stringWithFormat:@"echo \"curl -LO %s\" | GaPp;TMP=$(mktemp -d);echo \"unzip %s.zip -d $TMP\" | GaPp;echo \"mv $TMP/*.sdk /theos/sdks;echo\" | GaPp;echo \"rm -r %s.zip $TMP\" | GaPp", [dlLinK UTF8String], [sdkS UTF8String], [sdkS UTF8String]] WaitUntilExit: YES];		totalDownloaded += 1;		if ([fileManager fileExistsAtPath: Loc]) {			if (useColor) {				suc = [NSString stringWithFormat:@"%s%siPhoneOS %s SDK%s\n", [successfulSdk UTF8String], c_green, [sdkS UTF8String], c_reset];			} else {				suc = [NSString stringWithFormat:@"%siPhoneOS %s SDK\n", [successfulSdk UTF8String], [sdkS UTF8String]];			}			successfulSdk = suc;			return (YES);		} else {			if (useColor) {				faild = [NSString stringWithFormat:@"%s%siPhoneOS %s SDK%s\n", [failedSdk UTF8String], c_red, [sdkS UTF8String], c_reset];			} else {				faild = [NSString stringWithFormat:@"%siPhoneOS %s SDK\n", [failedSdk UTF8String], [sdkS UTF8String]];			}			failedSdk = faild;			failure = YES;			return (NO);		}	} else {		alreadyHas = YES;		if (useColor) {			ignore = [NSString stringWithFormat:@"%s%siPhoneOS %s SDK%s\n", [ignored UTF8String], c_yellow, [sdkS UTF8String], c_reset];		} else {			ignore = [NSString stringWithFormat:@"%siPhoneOS %s SDK\n", [ignored UTF8String], [sdkS UTF8String]];		}		ignored = ignore;	}	return (YES);}